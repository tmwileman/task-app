// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  lists    TaskList[]
  tasks    Task[]
  notifications Notification[]
  notificationPreferences NotificationPreferences?
  pushSubscription PushSubscription?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model TaskList {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  isDefault   Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  // Performance indexes
  @@index([userId, order]) // User lists with ordering
  @@index([userId, isDefault]) // Default lists lookup
  @@map("task_lists")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  archived    Boolean   @default(false)
  archivedAt  DateTime?
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  reminder    DateTime?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  userId      String
  listId      String?
  parentId    String?
  
  // Recurring task fields
  isRecurring   Boolean        @default(false)
  recurringType RecurringType?
  recurringInterval Int?
  recurringDays String?        // JSON array for custom days
  recurringUntil DateTime?
  lastRecurrence DateTime?

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  list     TaskList? @relation(fields: [listId], references: [id], onDelete: SetNull)
  parent   Task?     @relation("TaskSubtasks", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks Task[]    @relation("TaskSubtasks")
  tags     TaskTag[]
  notifications Notification[]
  scheduledReminders ScheduledReminder[]

  // Performance indexes
  @@index([userId, completed, archived, createdAt(sort: Desc)]) // Main task queries
  @@index([userId, listId, completed, archived]) // List filtering
  @@index([userId, dueDate, archived]) // Due date filtering
  @@index([userId, parentId, archived]) // Subtask queries
  @@index([userId, archived, archivedAt(sort: Desc)]) // Archive management
  @@index([dueDate, completed, archived]) // Overdue detection
  @@index([priority, dueDate, archived]) // Priority + due date sorting
  @@index([createdAt]) // Pagination cursor
  @@map("tasks")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())

  // Relations
  tasks TaskTag[]

  @@map("tags")
}

model TaskTag {
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@map("task_tags")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RecurringType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  CUSTOM
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  body      String
  type      String   @default("reminder") // reminder, deadline, overdue, digest, etc.
  taskId    String?
  data      String?  // JSON data for additional context
  read      Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)

  // Performance indexes
  @@index([userId, read, createdAt(sort: Desc)]) // Unread notifications
  @@index([userId, type, createdAt(sort: Desc)]) // Notifications by type
  @@map("notifications")
}

model NotificationPreferences {
  id               String   @id @default(cuid())
  userId           String   @unique
  deadlineReminders Json    // ReminderSettings object
  dailyDigest      Boolean  @default(true)
  weeklyReview     Boolean  @default(true)
  quietHours       Json     // QuietHours object
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model PushSubscription {
  id       String   @id @default(cuid())
  userId   String   @unique
  endpoint String
  p256dh   String
  auth     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

model ScheduledReminder {
  id              String   @id @default(cuid())
  taskId          String
  taskTitle       String
  dueDate         DateTime
  reminderDate    DateTime
  type            String   // deadline, overdue, daily_digest, weekly_review
  status          String   @default("pending") // pending, sent, cancelled
  notificationTypes Json   // Array of notification types
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([status, reminderDate]) // Pending reminders lookup
  @@index([taskId, status]) // Task reminders
  @@map("scheduled_reminders")
}